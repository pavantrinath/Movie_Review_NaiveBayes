# -*- coding: utf-8 -*-
"""
Created on Fri Nov 01 00:36:55 2013

@author: Pavan
"""
import os
import re
from collections import defaultdict
def nested_dict_factory(): 
  return defaultdict(int)
def nested_dict_factory2(): 
  return defaultdict(nested_dict_factory)
vocab = {}

negwords = {}
poswords = {}

countpost = {}
countnegt = {}
negwordcount ={}
post = {}
negt = {}
avgprob = 0.5 
wordcount = 0
kvalue = 10
#global posFilesPerFold
posFilesPerFold = 1
negFilesPerFold = 1
posFiles = {}
negFiles = {}
testIndex = 10
totalWords = 0 
 
def get_pos_review(path):
    filelist = os.listdir(path)
    filelist = filter(lambda x: x != 'cmds', filelist)
    global posFilesPerFold
    posFilesPerFold = len(filelist)/kvalue
    fileCount = 0  
    foldindex = 1 
    filecontent={}
    for f in filelist:
        path1 = os.path.join(path, f)
        fileCount+=1
        msgs = ""
        with open(path1, 'rU') as f1:
          for msg in f1 :
             msgs = msgs + " " +msg 
             
        #print "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
        #print msgs
        filecontent[fileCount] = msgs
        if (fileCount == posFilesPerFold) :
            
            #print fileCount
            #print "filecontent??"+str(len(filecontent))
            posFiles[foldindex] = filecontent            
            filecontent={}
            fileCount=0
            #print  len(posFiles[foldindex]) 
            #print str(foldindex)
            foldindex+=1
    
    return ""#all_msgs    


def get_neg_review(path):
    filelist = os.listdir(path)
    filelist = filter(lambda x: x != 'cmds', filelist)
    global negFilesPerFold
    negFilesPerFold = len(filelist)/kvalue
    fileCount = 0  
    foldindex = 1 
    filecontent={}
    for f in filelist:
        path1 = os.path.join(path, f)
        fileCount+=1
        msgs = ""
        with open(path1, 'rU') as f1:
          for msg in f1 :
             msgs = msgs + " " +msg 
             
        #print "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
        #print msgs
        filecontent[fileCount] = msgs
        if (fileCount == negFilesPerFold) :
            
            #print fileCount
            #print "filecontent??"+str(len(filecontent))
            negFiles[foldindex] = filecontent            
            filecontent={}
            fileCount=0
            #print  len(posFiles[foldindex]) 
            #print str(foldindex)
            foldindex+=1    
    return ""
            
def create_vocab(test_index):
    for indx in range(1,len(posFiles)):
        if indx != test_index :
            for fdata in posFiles[indx]:
               # print posFiles[indx][fdata]
                #for data in posFiles[indx][fdata]:
                    #print data
                    words = posFiles[indx][fdata].split(' ')
                    #print words                
                    for word in words:
                        if word in vocab:
                           vocab[word][1]+=1
                        else:
                           cnt = ['0','1']
                           #cnt = {0,1}
                           cnt[1] = 1
                           cnt[0] = 0
                           vocab[word]=cnt
                        global totalWords
                        totalWords+=1
            for fdata in negFiles[indx]:
                   # print posFiles[indx][fdata]
                    #for data in posFiles[indx][fdata]:
                        #print data
                        words = negFiles[indx][fdata].split(' ')
                        #print words                
                        for word in words:
                            if word in vocab:
                               vocab[word][0]+=1
                            else:
                               cnt = ['0','1']
                               #cnt = {0,1}
                               cnt[1] = 0
                               cnt[0] = 1
                               vocab[word]=cnt
                            global totalWords
                            totalWords+=1
                       
    #print len(vocab)
    #print totalWords 

def testNB(test_index):
    postiveProb = 0.0
    negetiveProb = 0.0
    correctClass = 0.0
    totalClass = 0.0
    for fdata in posFiles[test_index]:
        words = posFiles[test_index][fdata].split(' ')
        postiveProb = 0.0
        negetiveProb = 0.0
        checkWrd = {}
            #print words                
        for word in words:
             if word not in checkWrd:
                checkWrd[word] = word
                pos_wrd_count = 0.0
                neg_wrd_count = 0.0
                if word in vocab:
                    pos_wrd_count = vocab[word][1] 
                    neg_wrd_count = vocab[word][0] 
                pos_wrd_count = (pos_wrd_count + 1)/(len(words) + len(vocab))
                neg_wrd_count = (neg_wrd_count + 1)/(len(words) + len(vocab))
                postiveProb = postiveProb + pos_wrd_count
                negetiveProb = negetiveProb + neg_wrd_count
        postiveProb = postiveProb * 0.52;
        negetiveProb = negetiveProb * 0.5; 
        if(postiveProb > negetiveProb):
            correctClass+=1
        totalClass+=1
        
    for fdata in negFiles[test_index]:
        words = negFiles[test_index][fdata].split(' ')
        postiveProb = 0.0
        negetiveProb = 0.0
        checkWrd = {}
            #print words                
        for word in words:
            if word not in checkWrd:
                checkWrd[word] = word
                pos_wrd_count = 0.0
                neg_wrd_count = 0.0
                if word in vocab:
                    #print vocab[word][1] 
                    pos_wrd_count = vocab[word][1] 
                    neg_wrd_count = vocab[word][0] 
                #print str(neg_wrd_count) +"||"+str(pos_wrd_count)
                pos_wrd_count = (pos_wrd_count + 1)/(len(words) + len(vocab))
                neg_wrd_count = (neg_wrd_count + 1)/(len(words) + len(vocab))
                postiveProb = postiveProb + pos_wrd_count
                negetiveProb = negetiveProb + neg_wrd_count
        postiveProb = postiveProb * 0.50;
        negetiveProb = negetiveProb * 0.52; 
        #print str(fdata) +"||"+str(postiveProb)+"||"+str(negetiveProb)
        if(postiveProb < negetiveProb):
            correctClass+=1
        totalClass+=1
           
   
    #print "Total files: "+str(totalClass)  
    return (correctClass/totalClass)              
        
train_pos = os.path.abspath(os.path.join('.','./txt_sentoken/pos'))  
train_neg = os.path.abspath(os.path.join('.','./txt_sentoken/neg'))  
train_pos_review = get_pos_review(train_pos)    
train_neg_review = get_neg_review(train_neg)
avgAccuracy =0.0
f = open('output.txt','w') 
for k in range (1,kvalue+1):
    create_vocab(k)
    accuracy = testNB(k)
    avgAccuracy = avgAccuracy + accuracy

    f.write ("\n Accuracy over test set Index="+str(k)+" :  \n"+str(accuracy*100))
    f.write ("\n___________________________________________________\n")
f.write ("Average accuracy for "+str(kvalue)+"-folds NB ==> " + str((avgAccuracy*100)/kvalue))
f.close()
print "output given"
# f = open('output.txt','w')
#f.write ("Accuracy over test set Index="+str(k)+" ==> "+str(accuracy*100))
#f.write( "___________________________________________________"   )
#f.close()
